function [CSTeff, rho] = tensor_bac(ebsd, C_Voigt, phase_names, melt, bound)
% tensor_bac.m - A. L. Lee
% Calculates stiffness tensor and density for the layered fabric model.
% 
%   This function gives the stiffness tensor (CSTeff) produced by the
%   layered fabric model. This model takes into account the melt shape and 
%   calculates the aggregate Voigt/Reuss tensor at the different melt 
%   fractions. Melt layers are specified here and calculated according to 
%   Backus (1962).
%
%   INPUT
%   ebsd - EBSD variable as generated by MTEX
%   CT - The Voigt or Reuss tensor for the individual phases in the sample 
%   as calculated by the c_tensor_VRH function
%   phase_names - Phases present in the sample, generated at the same time
%   as the EBSD variable
%   melt - Specified melt fraction
%   bound - Voigt or Reuss
%   
%   OUTPUT
%   CSTeff - MTEX stiffness tensor
%   rho - aggregate density
%
%   Please direct all questions to A. L. Lee
%
%   
%% ***********************************************************************
%

% Calculating aggregate tensors and densities

% Calculating the aggregate C matrix and density for the specified melt
[C_matrix, rho_agg, C_incl, rho_melt] = VRH_agg_melt('SHP',ebsd,...
    C_Voigt, phase_names, melt, bound);

% Calculating the bulk and shear moduli for the solid rock and melt
[ K_vrh_mat, G_vrh_mat] = MS_polyaverage(C_matrix);
[ K_vrh_incl, G_vrh_incl] = MS_polyaverage(C_incl);

% Calculating the isotropic matrices for the solid rock and melt inclusion
C_backus = zeros(6,6,3);
C_backus(:,:,1) = MS_build_isotropic('k',K_vrh_mat,'mu',G_vrh_mat);
C_backus(:,:,2) = MS_build_isotropic('k',K_vrh_incl,'mu',G_vrh_incl);
C_backus(:,:,3) = MS_build_isotropic('k',K_vrh_mat,'mu',G_vrh_mat);

rho_backus = [rho_agg, rho_melt, rho_agg]';

% Calculating the aggregate C matrix and density for the specified melt.
% Melt shape is specified here and calculated according to Backus
[Ceff,rho] = MS_effective_medium('backus',...
    [(1-melt)/2, melt, (1-melt)/2],C_backus,rho_backus);

% Matrix is converted to a tensor
% Aggregate crystal symmetry
cs = crystalSymmetry('C1');
% Sriffness tensor
CSTeff = stiffnessTensor(Ceff,cs,'density',rho);

% End of function
end