function [CTeff, rho] = tensor_melt(ebsd, CT, model, phase_names, melt, bound, del, orientation)
% tensor_iso.m - A. L. Lee
% Calculates stiffness tensor and density for the no fabric model.
% 
%   This function gives the stiffness tensor (CSTeff) produced by the
%   no fabric model. This model evenly distributes melt in an isotropic 
%   solid framework and calculates the aggregate Voigt/Reuss tensor at the 
%   different melt fractions.
%
%   INPUT
%   ebsd - EBSD variable as generated by MTEX
%   CT - The Voigt or Reuss tensor for the individual phases in the sample 
%   as calculated by the c_tensor_VRH function
%   model - specify model: 'ISO' - No fabric, isotropic model
%                          'SHP' - Shape and layered fabric models
%                          'CPO' - Crystal fabric model
%   phase_names - Phases present in the sample, generated at the same time
%   as the EBSD variable
%   melt - Specified melt fraction
%   bound - Voigt or Reuss
%   
%   OUTPUT
%   CTeff - MTEX stiffness tensor
%   rho - aggregate density
%
%   Please direct all questions to A. L. Lee
%	Copyright (c) 2019 Amicia Lee, see LICENSE
%
%   
%% ***********************************************************************
%
if (strcmp(model, 'ISO'))
    % Calculating aggregate tensors and densities

    % Calculating the aggregate C matrix and density for the specified melt
    [C_matrix, rho_agg, C_incl, rho_melt] = ...
                    VRH_agg_melt(model,ebsd, CT, phase_names, melt, bound);

    % Calculating the bulk and shear moduli for the solid rock and melt
    [ K_vrh_mat, G_vrh_mat] = MS_polyaverage(C_matrix);
    [ K_vrh_incl, G_vrh_incl] = MS_polyaverage(C_incl);

    % Calculating the isotropic matrices for the solid rock and melt inclusion
    C_agg = MS_build_isotropic('k',K_vrh_mat,'mu',G_vrh_mat);
    C_melt = MS_build_isotropic('k',K_vrh_incl,'mu',G_vrh_incl);

    % Calculating the aggregate C tensor and density from proportions of the
    % solid and melt
    Ceff = (C_agg*(1-melt)) + (C_melt*melt);
    
    rho = (rho_agg*(1-melt)) + (rho_melt*melt);

elseif (strcmp(model, 'SHP'))
    % Calculating aggregate tensors and densities

    % Calculating the aggregate C matrix and density for the specified melt
    [C_matrix, rho_agg, C_incl, rho_melt] = VRH_agg_melt(model,ebsd,...
        CT, phase_names, melt, bound);

    % Calculating the bulk and shear moduli for the solid rock and melt
    [ K_vrh_mat, G_vrh_mat] = MS_polyaverage(C_matrix);
    [ K_vrh_incl, G_vrh_incl] = MS_polyaverage(C_incl);

    % Calculating the isotropic matrices for the solid rock and melt inclusion
    C_agg = MS_build_isotropic('k',K_vrh_mat,'mu',G_vrh_mat);
    C_melt = MS_build_isotropic('k',K_vrh_incl,'mu',G_vrh_incl);

    % Calculating the aggregate C matrix and density for the specified melt.
    % Melt shape is specified here and calculated according to Tandon and Weng
    [Ceff,rho] = MS_effective_medium('t&w',C_agg,rho_agg,...
        C_melt,rho_melt,del,melt);

    % Matrix is converted to a tensor
    [~,s] = size(orientation);
    if s == 1
        Ceff = MS_rot3(Ceff,0,0,orientation);
    else
        Ceff = MS_rot3(Ceff,orientation(1),orientation(2),orientation(3));
    end
elseif (strcmp(model, 'BAC'))
    % Calculating aggregate tensors and densities

    % Calculating the aggregate C matrix and density for the specified melt
        [C_matrix, rho_agg, C_incl, rho_melt] = VRH_agg_melt('SHP',ebsd,...
            CT, phase_names, melt, bound);

    % Calculating the bulk and shear moduli for the solid rock and melt
    [ K_vrh_mat, G_vrh_mat] = MS_polyaverage(C_matrix);
    [ K_vrh_incl, G_vrh_incl] = MS_polyaverage(C_incl);

    % Calculating the isotropic matrices for the solid rock and melt inclusion
    C_backus = zeros(6,6,3);
    C_backus(:,:,1) = MS_build_isotropic('k',K_vrh_mat,'mu',G_vrh_mat);
    C_backus(:,:,2) = MS_build_isotropic('k',K_vrh_incl,'mu',G_vrh_incl);
    C_backus(:,:,3) = MS_build_isotropic('k',K_vrh_mat,'mu',G_vrh_mat);

    rho_backus = [rho_agg, rho_melt, rho_agg]';

    % Calculating the aggregate C matrix and density for the specified melt.
    % Melt shape is specified here and calculated according to Backus
    [Ceff,rho] = MS_effective_medium('backus',...
        [(1-melt)/2, melt, (1-melt)/2],C_backus,rho_backus);
    
elseif strcmp (model, 'CPO')
    % Calculating the aggregate C matrix and density for the specified melt
    [Ceff, rho] = VRH_agg_melt('CPO', ebsd, CT, phase_names, melt, bound);
end
%% Converting to stiffness tensor

% Aggregate crystal symmetry
cs = crystalSymmetry('C1');
% Sriffness tensor
CTeff = stiffnessTensor(Ceff,cs,'density',rho);

% End of function
end